// Code generated by goyacc -o fss.y.go -p fss fss.y. DO NOT EDIT.

//line fss.y:8
package main

import __yyfmt__ "fmt"

//line fss.y:8

//import "github.com/laik/echoer/pkg/fsm"
//import "github.com/laik/echoer/pkg/resource"

var (
	print  = __yyfmt__.Print
	printf = __yyfmt__.Printf
)

//line fss.y:20
type fssSymType struct {
	yys     int
	Flow    string                 `json:"flow_name"`
	Steps   []string               `json:"steps"`
	Actions map[string]interface{} `json:"actions"` // action["step_name"]map["action_name"]interfaec{} args==list/map
	IsEnd   bool                   `json:"is_end"`
	err     error
}

const ILLEGAL = 57346
const EOL = 57347
const IDENTIFIER = 57348
const NUMBER = 57349
const ID = 57350
const LIST = 57351
const VARIABLE = 57352
const TEXT = 57353
const FLOW = 57354
const FLOW_END = 57355
const STEP = 57356
const ACTION = 57357
const ARGS = 57358
const LPAREN = 57359
const RPAREN = 57360
const LSQUARE = 57361
const RSQUARE = 57362
const LCURLY = 57363
const RCURLY = 57364
const ASSIGN = 57365
const SEMICOLON = 57366
const OR = 57367
const AND = 57368
const TO = 57369
const COMMA = 57370
const COLON = 57371
const DEST = 57372
const DECI = 57373
const DICT = 57374

var fssToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"EOL",
	"IDENTIFIER",
	"NUMBER",
	"ID",
	"LIST",
	"VARIABLE",
	"TEXT",
	"FLOW",
	"FLOW_END",
	"STEP",
	"ACTION",
	"ARGS",
	"LPAREN",
	"RPAREN",
	"LSQUARE",
	"RSQUARE",
	"LCURLY",
	"RCURLY",
	"ASSIGN",
	"SEMICOLON",
	"OR",
	"AND",
	"TO",
	"COMMA",
	"COLON",
	"DEST",
	"DECI",
	"DICT",
}

var fssStatenames = [...]string{}

const fssEofCode = 1
const fssErrCode = 2
const fssInitialStackSize = 16

//line fss.y:109

//line yacctab:1
var fssExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const fssPrivate = 57344

const fssLast = 40

var fssAct = [...]int{
	34, 6, 28, 25, 16, 14, 23, 22, 26, 21,
	27, 33, 15, 18, 17, 30, 12, 8, 7, 31,
	24, 32, 19, 35, 3, 10, 9, 4, 11, 5,
	2, 20, 29, 1, 0, 0, 0, 0, 0, 13,
}

var fssPact = [...]int{
	-1000, 12, -1000, 16, -13, 4, 15, 14, -1000, 1,
	1, -22, -11, -23, -4, 11, -4, -15, -5, -25,
	-16, -1000, -8, -28, -5, -1, -1000, -1000, 10, -1000,
	-12, -1000, -1000, -9, -1000, -1000,
}

var fssPgo = [...]int{
	0, 33, 30, 29, 28, 14, 7,
}

var fssR1 = [...]int{
	0, 1, 1, 2, 3, 3, 4, 4, 5, 6,
	6, 6,
}

var fssR2 = [...]int{
	0, 2, 0, 4, 6, 6, 7, 7, 3, 3,
	3, 2,
}

var fssChk = [...]int{
	-1000, -1, -2, 12, 11, -3, 14, 31, 13, 11,
	11, -4, 15, -4, 27, 23, 27, -5, 17, 11,
	-5, 24, -6, 11, 25, 28, 24, 18, 30, -6,
	16, 9, 11, 23, 9, 32,
}

var fssDef = [...]int{
	2, -2, 1, 0, 0, 0, 0, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4, 0, 0, 0, 0, 5, 8, 0, 11,
	0, 9, 10, 0, 6, 7,
}

var fssTok1 = [...]int{
	1,
}

var fssTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32,
}

var fssTok3 = [...]int{
	0,
}

var fssErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	fssDebug        = 0
	fssErrorVerbose = false
)

type fssLexer interface {
	Lex(lval *fssSymType) int
	Error(s string)
}

type fssParser interface {
	Parse(fssLexer) int
	Lookahead() int
}

type fssParserImpl struct {
	lval  fssSymType
	stack [fssInitialStackSize]fssSymType
	char  int
}

func (p *fssParserImpl) Lookahead() int {
	return p.char
}

func fssNewParser() fssParser {
	return &fssParserImpl{}
}

const fssFlag = -1000

func fssTokname(c int) string {
	if c >= 1 && c-1 < len(fssToknames) {
		if fssToknames[c-1] != "" {
			return fssToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func fssStatname(s int) string {
	if s >= 0 && s < len(fssStatenames) {
		if fssStatenames[s] != "" {
			return fssStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func fssErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !fssErrorVerbose {
		return "syntax error"
	}

	for _, e := range fssErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + fssTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := fssPact[state]
	for tok := TOKSTART; tok-1 < len(fssToknames); tok++ {
		if n := base + tok; n >= 0 && n < fssLast && fssChk[fssAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if fssDef[state] == -2 {
		i := 0
		for fssExca[i] != -1 || fssExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; fssExca[i] >= 0; i += 2 {
			tok := fssExca[i]
			if tok < TOKSTART || fssExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if fssExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += fssTokname(tok)
	}
	return res
}

func fsslex1(lex fssLexer, lval *fssSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = fssTok1[0]
		goto out
	}
	if char < len(fssTok1) {
		token = fssTok1[char]
		goto out
	}
	if char >= fssPrivate {
		if char < fssPrivate+len(fssTok2) {
			token = fssTok2[char-fssPrivate]
			goto out
		}
	}
	for i := 0; i < len(fssTok3); i += 2 {
		token = fssTok3[i+0]
		if token == char {
			token = fssTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = fssTok2[1] /* unknown char */
	}
	if fssDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", fssTokname(token), uint(char))
	}
	return char, token
}

func fssParse(fsslex fssLexer) int {
	return fssNewParser().Parse(fsslex)
}

func (fssrcvr *fssParserImpl) Parse(fsslex fssLexer) int {
	var fssn int
	var fssVAL fssSymType
	var fssDollar []fssSymType
	_ = fssDollar // silence set and not used
	fssS := fssrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	fssstate := 0
	fssrcvr.char = -1
	fsstoken := -1 // fssrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		fssstate = -1
		fssrcvr.char = -1
		fsstoken = -1
	}()
	fssp := -1
	goto fssstack

ret0:
	return 0

ret1:
	return 1

fssstack:
	/* put a state and value onto the stack */
	if fssDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", fssTokname(fsstoken), fssStatname(fssstate))
	}

	fssp++
	if fssp >= len(fssS) {
		nyys := make([]fssSymType, len(fssS)*2)
		copy(nyys, fssS)
		fssS = nyys
	}
	fssS[fssp] = fssVAL
	fssS[fssp].yys = fssstate

fssnewstate:
	fssn = fssPact[fssstate]
	if fssn <= fssFlag {
		goto fssdefault /* simple state */
	}
	if fssrcvr.char < 0 {
		fssrcvr.char, fsstoken = fsslex1(fsslex, &fssrcvr.lval)
	}
	fssn += fsstoken
	if fssn < 0 || fssn >= fssLast {
		goto fssdefault
	}
	fssn = fssAct[fssn]
	if fssChk[fssn] == fsstoken { /* valid shift */
		fssrcvr.char = -1
		fsstoken = -1
		fssVAL = fssrcvr.lval
		fssstate = fssn
		if Errflag > 0 {
			Errflag--
		}
		goto fssstack
	}

fssdefault:
	/* default state action */
	fssn = fssDef[fssstate]
	if fssn == -2 {
		if fssrcvr.char < 0 {
			fssrcvr.char, fsstoken = fsslex1(fsslex, &fssrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if fssExca[xi+0] == -1 && fssExca[xi+1] == fssstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			fssn = fssExca[xi+0]
			if fssn < 0 || fssn == fsstoken {
				break
			}
		}
		fssn = fssExca[xi+1]
		if fssn < 0 {
			goto ret0
		}
	}
	if fssn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			fsslex.Error(fssErrorMessage(fssstate, fsstoken))
			Nerrs++
			if fssDebug >= 1 {
				__yyfmt__.Printf("%s", fssStatname(fssstate))
				__yyfmt__.Printf(" saw %s\n", fssTokname(fsstoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for fssp >= 0 {
				fssn = fssPact[fssS[fssp].yys] + fssErrCode
				if fssn >= 0 && fssn < fssLast {
					fssstate = fssAct[fssn] /* simulate a shift of "error" */
					if fssChk[fssstate] == fssErrCode {
						goto fssstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if fssDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", fssS[fssp].yys)
				}
				fssp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if fssDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", fssTokname(fsstoken))
			}
			if fsstoken == fssEofCode {
				goto ret1
			}
			fssrcvr.char = -1
			fsstoken = -1
			goto fssnewstate /* try again in the same state */
		}
	}

	/* reduction by production fssn */
	if fssDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", fssn, fssStatname(fssstate))
	}

	fssnt := fssn
	fsspt := fssp
	_ = fsspt // guard against "declared and not used"

	fssp -= fssR2[fssn]
	// fssp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if fssp+1 >= len(fssS) {
		nyys := make([]fssSymType, len(fssS)*2)
		copy(nyys, fssS)
		fssS = nyys
	}
	fssVAL = fssS[fssp+1]

	/* consult goto table to find next state */
	fssn = fssR1[fssn]
	fssg := fssPgo[fssn]
	fssj := fssg + fssS[fssp].yys + 1

	if fssj >= fssLast {
		fssstate = fssAct[fssg]
	} else {
		fssstate = fssAct[fssj]
		if fssChk[fssstate] != -fssn {
			fssstate = fssAct[fssg]
		}
	}
	// dummy call; replaced with literal code
	switch fssnt {

	case 1:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:60
		{
			print(fssDollar[2])
		}
	case 2:
		fssDollar = fssS[fsspt-0 : fsspt+1]
//line fss.y:61
		{ /* empty */
		}
	case 3:
		fssDollar = fssS[fsspt-4 : fsspt+1]
//line fss.y:65
		{
			fssVAL = fssDollar[2]
		}
	case 4:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:70
		{
			printf("step name = %s\n", fssDollar[2])
		}
	case 5:
		fssDollar = fssS[fsspt-6 : fsspt+1]
//line fss.y:74
		{
			printf("deci name = %s\n", fssDollar[2])
		}
	case 6:
		fssDollar = fssS[fsspt-7 : fsspt+1]
//line fss.y:81
		{
			printf("action = %s args = \n", fssDollar[2], fssDollar[7])
		}
	case 7:
		fssDollar = fssS[fsspt-7 : fsspt+1]
//line fss.y:85
		{
			printf("action = %s args = \n", fssDollar[2], fssDollar[7])
		}
	case 8:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:92
		{
			printf(" return_content_expr = %s", fssDollar[2])
		}
	case 9:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:99
		{
			printf(" state = %s dest %v ", fssDollar[1], fssDollar[3])
		}
	case 10:
		fssDollar = fssS[fsspt-3 : fsspt+1]
//line fss.y:103
		{
			printf(" state = %s dest %v ", fssDollar[1], fssDollar[3])
		}
	case 11:
		fssDollar = fssS[fsspt-2 : fsspt+1]
//line fss.y:106
		{
			fssVAL = fssDollar[2]
		}
	}
	goto fssstack /* stack new state and value */
}
